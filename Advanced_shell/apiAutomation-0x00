#!/usr/bin/env bash
# Automate a request to the PokÃ©mon API for Pikachu and save to data.json
set -Eeuo pipefail

API_URL="https://pokeapi.co/api/v2/pokemon/pikachu"
OUT_FILE="data.json"
ERR_FILE="errors.txt"

timestamp() { date +"%Y-%m-%d %H:%M:%S"; }

require_cmd() {
  command -v "$1" >/dev/null 2>&1 || {
    echo "$(timestamp) [ERROR] Required command '$1' not found." >> "$ERR_FILE"
    exit 127
  }
}

require_cmd curl
require_cmd jq

TMP="$(mktemp)"
trap 'rm -f "$TMP"' EXIT

# Fetch with minimal retries and capture HTTP status
STATUS="$(curl -sS \
  --retry 3 --retry-delay 1 --retry-connrefused \
  -H "User-Agent: ALXprodev-Devops/1.0 (+pokeapi-test)" \
  -w "%{http_code}" -o "$TMP" "$API_URL" || true)"

# Success path: 2xx
if [[ "$STATUS" =~ ^2[0-9]{2}$ ]]; then
  if jq -e . "$TMP" >/dev/null 2>>"$ERR_FILE"; then
    mv "$TMP" "$OUT_FILE"
    echo "$(timestamp) [OK] Saved Pikachu data to $OUT_FILE (HTTP $STATUS)."
    exit 0
  else
    echo "$(timestamp) [ERROR] Invalid JSON received from API." >> "$ERR_FILE"
    exit 1
  fi
fi

# Failure path: log details
{
  echo "$(timestamp) [ERROR] Request failed (HTTP $STATUS) from $API_URL"
  echo "---- Response body (last 500 bytes) ----"
  tail -c 500 "$TMP" 2>/dev/null || true
  echo "----------------------------------------"
} >> "$ERR_FILE"

exit 1
